// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Auth.js / NextAuth Prisma Adapter models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Local auth
  passwordHash  String?

  accounts      Account[]
  sessions      Session[]

  // App relations
  presetFoodItems FoodItem[]
  entries         Entry[]
  dailyGoals      DailyGoal[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Domain models
model FoodItem {
  id              String   @id @default(cuid())
  userId          String
  name            String
  caloriesPerUnit Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries Entry[]

  @@index([userId, name])
}

model Entry {
  id         String   @id @default(cuid())
  userId     String
  // ISO date key YYYY-MM-DD to avoid timezone issues with SQLite
  dateKey    String
  name       String
  calories   Int
  foodItemId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodItem FoodItem? @relation(fields: [foodItemId], references: [id])

  @@index([userId, dateKey])
}

model DailyGoal {
  id           String   @id @default(cuid())
  userId       String
  goalCalories Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
